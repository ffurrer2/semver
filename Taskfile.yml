# SPDX-License-Identifier: MIT
# https://taskfile.dev
version: '3'

includes:
  dockle: ./tasks/DockleTasks.yml
  git: ./tasks/GitTasks.yml
  go: ./tasks/GoTasks.yml
  golangci: ./tasks/GolangciLintTasks.yml
  goreleaser: ./tasks/GoreleaserTasks.yml
  hadolint: ./tasks/HadolintTasks.yml
  licensed: ./tasks/LicensedTasks.yml
  markdownlint: ./tasks/MarkdownlintTasks.yml
  misc: ./tasks/MiscTasks.yml
  trivy: ./tasks/TrivyTasks.yml
  yamllint: ./tasks/YamllintTasks.yml

vars:
  PROJECT_NAME: semver
  PROJECT_OWNER: ffurrer2
  BUILD_VERSION: {sh: bash ./scripts/version}
  BUILD_VERSION_SHORT: {sh: bash ./scripts/version --short}
  BUILD_DATE: '{{dateInZone "2006-01-02T15:04:05Z" now "UTC"}}'
  GIT_SHA: {sh: git rev-parse HEAD}
  GIT_SHA_SHORT: {sh: git rev-parse --short HEAD}
  GIT_TREE_STATE: {sh: 'if [[ -n "$(git status --porcelain)" ]]; then echo "dirty"; else echo "clean"; fi'}

tasks:
  default:
    cmds:
    - task --list
    silent: true

  clean:
    desc: Delete build artifacts
    cmds:
    - task: go:clean
    silent: true

  build:
    desc: Build {{.PROJECT_NAME}}
    cmds:
    - task: go:build
    silent: true

  test:
    desc: Test {{.PROJECT_NAME}}
    cmds:
    - task: go:test
    - task: misc:container-structure-test
    silent: true

  lint:
    desc: Run all linters
    cmds:
    - task: golangci:lint
    - task: hadolint:lint
      vars:
        DOCKERFILE: 'build/package/Dockerfile'
    - task: hadolint:lint
      vars:
        DOCKERFILE: 'build/package/Dockerfile.alpine'
    - task: markdownlint:lint
    - task: yamllint:lint
    silent: true

  scan:
    desc: Run image scans
    cmds:
    - task: dockle:lint
      vars:
        IMAGE_NAME: 'ghcr.io/ffurrer2/semver:latest'
    - task: dockle:lint
      vars:
        IMAGE_NAME: 'ghcr.io/ffurrer2/semver:alpine'
    - task: trivy:image:scan
      vars:
        IMAGE_NAME: 'ghcr.io/ffurrer2/semver:latest'
    - task: trivy:image:scan
      vars:
        IMAGE_NAME: 'ghcr.io/ffurrer2/semver:alpine'
    silent: true

  fmt:
    desc: Format code
    cmds:
    - task: go:gofumpt
    silent: true

  version:
    desc: Show versions
    cmds:
    - |
      set -euo pipefail
      printf 'container-structure-test: %s\n' "$(container-structure-test version | cut -c 2-)"
      printf 'docker:                   %s\n' "$(docker version --format json | jq --raw-output '.Client.Version')"
      printf 'dockle:                   %s\n' "$(dockle --version | cut -d ' ' -f 3)"
      printf 'git:                      %s\n' "$(git --version | cut -d ' ' -f 3)"
      printf 'go-mod-upgrade:           %s\n' "$(go-mod-upgrade --version | tail -n 1 | cut -d ' ' -f 3 | cut -c 2-)"
      printf 'go:                       %s\n' "$(go version | cut -d ' ' -f 3 | cut -c 3-)"
      printf 'gofumpt:                  %s\n' "$(gofumpt --version | cut -c 1-)"
      printf 'golangci-lint:            %s\n' "$(golangci-lint version --format short)"
      printf 'goreleaser:               %s\n' "$(goreleaser --version  | head -n 1 | cut -d ' ' -f 3)"
      printf 'hadolint:                 %s\n' "$(hadolint --version | cut -d ' ' -f 4)"
      printf 'licensed:                 %s\n' "$(licensed version)"
      printf 'task:                     %s\n' "$(task --version | cut -d ' ' -f 3 | cut -c 2-)"
      printf 'trivy:                    %s\n' "$(trivy version --format json | jq --raw-output '.Version')"
      printf 'yamllint:                 %s\n' "$(yamllint --version | cut -d ' ' -f 2)"
    silent: true
